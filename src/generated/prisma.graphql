# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Level1 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  level2s(where: Level2WhereInput, orderBy: Level2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level2!]
}

type Level2 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  level1(where: Level1WhereInput): Level1
  level3s(where: Level3WhereInput, orderBy: Level3OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level3!]
  level4s(where: Level4WhereInput, orderBy: Level4OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level4!]
}

type Level3 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  level2(where: Level2WhereInput): Level2!
  level5(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level5!]
}

type Level4 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  level2(where: Level2WhereInput): Level2!
  level5(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level5!]
}

type Level5 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  level6(where: Level6WhereInput, orderBy: Level6OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level6!]
  level4(where: Level4WhereInput): Level4!
  original(where: Level3WhereInput): Level3
}

type Level6 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
}


#
# Other Types
#

type AggregateLevel1 {
  count: Int!
}

type AggregateLevel2 {
  count: Int!
}

type AggregateLevel3 {
  count: Int!
}

type AggregateLevel4 {
  count: Int!
}

type AggregateLevel5 {
  count: Int!
}

type AggregateLevel6 {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type Level1Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level1Edge]!
  aggregate: AggregateLevel1!
}

input Level1CreateInput {
  name: String!
  description: String
  active: Boolean
  level2s: Level2CreateManyWithoutLevel1Input
}

input Level1CreateOneWithoutLevel2sInput {
  create: Level1CreateWithoutLevel2sInput
  connect: Level1WhereUniqueInput
}

input Level1CreateWithoutLevel2sInput {
  name: String!
  description: String
  active: Boolean
}

"""
An edge in a connection.
"""
type Level1Edge {
  """
  The item at the end of the edge.
  """
  node: Level1!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level1OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level1PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level1SubscriptionPayload {
  mutation: MutationType!
  node: Level1
  updatedFields: [String!]
  previousValues: Level1PreviousValues
}

input Level1SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level1SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level1SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level1WhereInput
}

input Level1UpdateInput {
  name: String
  description: String
  active: Boolean
  level2s: Level2UpdateManyWithoutLevel1Input
}

input Level1UpdateOneWithoutLevel2sInput {
  create: Level1CreateWithoutLevel2sInput
  connect: Level1WhereUniqueInput
  disconnect: Level1WhereUniqueInput
  delete: Level1WhereUniqueInput
  update: Level1UpdateWithoutLevel2sInput
  upsert: Level1UpsertWithoutLevel2sInput
}

input Level1UpdateWithoutLevel2sDataInput {
  name: String
  description: String
  active: Boolean
}

input Level1UpdateWithoutLevel2sInput {
  where: Level1WhereUniqueInput!
  data: Level1UpdateWithoutLevel2sDataInput!
}

input Level1UpsertWithoutLevel2sInput {
  where: Level1WhereUniqueInput!
  update: Level1UpdateWithoutLevel2sDataInput!
  create: Level1CreateWithoutLevel2sInput!
}

input Level1WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level1WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level1WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  level2s_every: Level2WhereInput
  level2s_some: Level2WhereInput
  level2s_none: Level2WhereInput
}

input Level1WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level2Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level2Edge]!
  aggregate: AggregateLevel2!
}

input Level2CreateInput {
  name: String!
  description: String
  active: Boolean
  level1: Level1CreateOneWithoutLevel2sInput
  level3s: Level3CreateManyWithoutLevel2Input
  level4s: Level4CreateManyWithoutLevel2Input
}

input Level2CreateManyWithoutLevel1Input {
  create: [Level2CreateWithoutLevel1Input!]
  connect: [Level2WhereUniqueInput!]
}

input Level2CreateOneWithoutLevel3sInput {
  create: Level2CreateWithoutLevel3sInput
  connect: Level2WhereUniqueInput
}

input Level2CreateOneWithoutLevel4sInput {
  create: Level2CreateWithoutLevel4sInput
  connect: Level2WhereUniqueInput
}

input Level2CreateWithoutLevel1Input {
  name: String!
  description: String
  active: Boolean
  level3s: Level3CreateManyWithoutLevel2Input
  level4s: Level4CreateManyWithoutLevel2Input
}

input Level2CreateWithoutLevel3sInput {
  name: String!
  description: String
  active: Boolean
  level1: Level1CreateOneWithoutLevel2sInput
  level4s: Level4CreateManyWithoutLevel2Input
}

input Level2CreateWithoutLevel4sInput {
  name: String!
  description: String
  active: Boolean
  level1: Level1CreateOneWithoutLevel2sInput
  level3s: Level3CreateManyWithoutLevel2Input
}

"""
An edge in a connection.
"""
type Level2Edge {
  """
  The item at the end of the edge.
  """
  node: Level2!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level2OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level2PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level2SubscriptionPayload {
  mutation: MutationType!
  node: Level2
  updatedFields: [String!]
  previousValues: Level2PreviousValues
}

input Level2SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level2SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level2SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level2WhereInput
}

input Level2UpdateInput {
  name: String
  description: String
  active: Boolean
  level1: Level1UpdateOneWithoutLevel2sInput
  level3s: Level3UpdateManyWithoutLevel2Input
  level4s: Level4UpdateManyWithoutLevel2Input
}

input Level2UpdateManyWithoutLevel1Input {
  create: [Level2CreateWithoutLevel1Input!]
  connect: [Level2WhereUniqueInput!]
  disconnect: [Level2WhereUniqueInput!]
  delete: [Level2WhereUniqueInput!]
  update: [Level2UpdateWithoutLevel1Input!]
  upsert: [Level2UpsertWithoutLevel1Input!]
}

input Level2UpdateOneWithoutLevel3sInput {
  create: Level2CreateWithoutLevel3sInput
  connect: Level2WhereUniqueInput
  disconnect: Level2WhereUniqueInput
  delete: Level2WhereUniqueInput
  update: Level2UpdateWithoutLevel3sInput
  upsert: Level2UpsertWithoutLevel3sInput
}

input Level2UpdateOneWithoutLevel4sInput {
  create: Level2CreateWithoutLevel4sInput
  connect: Level2WhereUniqueInput
  disconnect: Level2WhereUniqueInput
  delete: Level2WhereUniqueInput
  update: Level2UpdateWithoutLevel4sInput
  upsert: Level2UpsertWithoutLevel4sInput
}

input Level2UpdateWithoutLevel1DataInput {
  name: String
  description: String
  active: Boolean
  level3s: Level3UpdateManyWithoutLevel2Input
  level4s: Level4UpdateManyWithoutLevel2Input
}

input Level2UpdateWithoutLevel1Input {
  where: Level2WhereUniqueInput!
  data: Level2UpdateWithoutLevel1DataInput!
}

input Level2UpdateWithoutLevel3sDataInput {
  name: String
  description: String
  active: Boolean
  level1: Level1UpdateOneWithoutLevel2sInput
  level4s: Level4UpdateManyWithoutLevel2Input
}

input Level2UpdateWithoutLevel3sInput {
  where: Level2WhereUniqueInput!
  data: Level2UpdateWithoutLevel3sDataInput!
}

input Level2UpdateWithoutLevel4sDataInput {
  name: String
  description: String
  active: Boolean
  level1: Level1UpdateOneWithoutLevel2sInput
  level3s: Level3UpdateManyWithoutLevel2Input
}

input Level2UpdateWithoutLevel4sInput {
  where: Level2WhereUniqueInput!
  data: Level2UpdateWithoutLevel4sDataInput!
}

input Level2UpsertWithoutLevel1Input {
  where: Level2WhereUniqueInput!
  update: Level2UpdateWithoutLevel1DataInput!
  create: Level2CreateWithoutLevel1Input!
}

input Level2UpsertWithoutLevel3sInput {
  where: Level2WhereUniqueInput!
  update: Level2UpdateWithoutLevel3sDataInput!
  create: Level2CreateWithoutLevel3sInput!
}

input Level2UpsertWithoutLevel4sInput {
  where: Level2WhereUniqueInput!
  update: Level2UpdateWithoutLevel4sDataInput!
  create: Level2CreateWithoutLevel4sInput!
}

input Level2WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level2WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level2WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  level1: Level1WhereInput
  level3s_every: Level3WhereInput
  level3s_some: Level3WhereInput
  level3s_none: Level3WhereInput
  level4s_every: Level4WhereInput
  level4s_some: Level4WhereInput
  level4s_none: Level4WhereInput
}

input Level2WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level3Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level3Edge]!
  aggregate: AggregateLevel3!
}

input Level3CreateInput {
  name: String!
  description: String
  active: Boolean
  level2: Level2CreateOneWithoutLevel3sInput!
  level5: Level5CreateManyWithoutOriginalInput
}

input Level3CreateManyWithoutLevel2Input {
  create: [Level3CreateWithoutLevel2Input!]
  connect: [Level3WhereUniqueInput!]
}

input Level3CreateOneWithoutLevel5Input {
  create: Level3CreateWithoutLevel5Input
  connect: Level3WhereUniqueInput
}

input Level3CreateWithoutLevel2Input {
  name: String!
  description: String
  active: Boolean
  level5: Level5CreateManyWithoutOriginalInput
}

input Level3CreateWithoutLevel5Input {
  name: String!
  description: String
  active: Boolean
  level2: Level2CreateOneWithoutLevel3sInput!
}

"""
An edge in a connection.
"""
type Level3Edge {
  """
  The item at the end of the edge.
  """
  node: Level3!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level3OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level3PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level3SubscriptionPayload {
  mutation: MutationType!
  node: Level3
  updatedFields: [String!]
  previousValues: Level3PreviousValues
}

input Level3SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level3SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level3SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level3WhereInput
}

input Level3UpdateInput {
  name: String
  description: String
  active: Boolean
  level2: Level2UpdateOneWithoutLevel3sInput
  level5: Level5UpdateManyWithoutOriginalInput
}

input Level3UpdateManyWithoutLevel2Input {
  create: [Level3CreateWithoutLevel2Input!]
  connect: [Level3WhereUniqueInput!]
  disconnect: [Level3WhereUniqueInput!]
  delete: [Level3WhereUniqueInput!]
  update: [Level3UpdateWithoutLevel2Input!]
  upsert: [Level3UpsertWithoutLevel2Input!]
}

input Level3UpdateOneWithoutLevel5Input {
  create: Level3CreateWithoutLevel5Input
  connect: Level3WhereUniqueInput
  disconnect: Level3WhereUniqueInput
  delete: Level3WhereUniqueInput
  update: Level3UpdateWithoutLevel5Input
  upsert: Level3UpsertWithoutLevel5Input
}

input Level3UpdateWithoutLevel2DataInput {
  name: String
  description: String
  active: Boolean
  level5: Level5UpdateManyWithoutOriginalInput
}

input Level3UpdateWithoutLevel2Input {
  where: Level3WhereUniqueInput!
  data: Level3UpdateWithoutLevel2DataInput!
}

input Level3UpdateWithoutLevel5DataInput {
  name: String
  description: String
  active: Boolean
  level2: Level2UpdateOneWithoutLevel3sInput
}

input Level3UpdateWithoutLevel5Input {
  where: Level3WhereUniqueInput!
  data: Level3UpdateWithoutLevel5DataInput!
}

input Level3UpsertWithoutLevel2Input {
  where: Level3WhereUniqueInput!
  update: Level3UpdateWithoutLevel2DataInput!
  create: Level3CreateWithoutLevel2Input!
}

input Level3UpsertWithoutLevel5Input {
  where: Level3WhereUniqueInput!
  update: Level3UpdateWithoutLevel5DataInput!
  create: Level3CreateWithoutLevel5Input!
}

input Level3WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level3WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level3WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  level2: Level2WhereInput
  level5_every: Level5WhereInput
  level5_some: Level5WhereInput
  level5_none: Level5WhereInput
}

input Level3WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level4Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level4Edge]!
  aggregate: AggregateLevel4!
}

input Level4CreateInput {
  name: String!
  description: String
  active: Boolean
  level2: Level2CreateOneWithoutLevel4sInput!
  level5: Level5CreateManyWithoutLevel4Input
}

input Level4CreateManyWithoutLevel2Input {
  create: [Level4CreateWithoutLevel2Input!]
  connect: [Level4WhereUniqueInput!]
}

input Level4CreateOneWithoutLevel5Input {
  create: Level4CreateWithoutLevel5Input
  connect: Level4WhereUniqueInput
}

input Level4CreateWithoutLevel2Input {
  name: String!
  description: String
  active: Boolean
  level5: Level5CreateManyWithoutLevel4Input
}

input Level4CreateWithoutLevel5Input {
  name: String!
  description: String
  active: Boolean
  level2: Level2CreateOneWithoutLevel4sInput!
}

"""
An edge in a connection.
"""
type Level4Edge {
  """
  The item at the end of the edge.
  """
  node: Level4!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level4OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level4PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level4SubscriptionPayload {
  mutation: MutationType!
  node: Level4
  updatedFields: [String!]
  previousValues: Level4PreviousValues
}

input Level4SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level4SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level4SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level4WhereInput
}

input Level4UpdateInput {
  name: String
  description: String
  active: Boolean
  level2: Level2UpdateOneWithoutLevel4sInput
  level5: Level5UpdateManyWithoutLevel4Input
}

input Level4UpdateManyWithoutLevel2Input {
  create: [Level4CreateWithoutLevel2Input!]
  connect: [Level4WhereUniqueInput!]
  disconnect: [Level4WhereUniqueInput!]
  delete: [Level4WhereUniqueInput!]
  update: [Level4UpdateWithoutLevel2Input!]
  upsert: [Level4UpsertWithoutLevel2Input!]
}

input Level4UpdateOneWithoutLevel5Input {
  create: Level4CreateWithoutLevel5Input
  connect: Level4WhereUniqueInput
  disconnect: Level4WhereUniqueInput
  delete: Level4WhereUniqueInput
  update: Level4UpdateWithoutLevel5Input
  upsert: Level4UpsertWithoutLevel5Input
}

input Level4UpdateWithoutLevel2DataInput {
  name: String
  description: String
  active: Boolean
  level5: Level5UpdateManyWithoutLevel4Input
}

input Level4UpdateWithoutLevel2Input {
  where: Level4WhereUniqueInput!
  data: Level4UpdateWithoutLevel2DataInput!
}

input Level4UpdateWithoutLevel5DataInput {
  name: String
  description: String
  active: Boolean
  level2: Level2UpdateOneWithoutLevel4sInput
}

input Level4UpdateWithoutLevel5Input {
  where: Level4WhereUniqueInput!
  data: Level4UpdateWithoutLevel5DataInput!
}

input Level4UpsertWithoutLevel2Input {
  where: Level4WhereUniqueInput!
  update: Level4UpdateWithoutLevel2DataInput!
  create: Level4CreateWithoutLevel2Input!
}

input Level4UpsertWithoutLevel5Input {
  where: Level4WhereUniqueInput!
  update: Level4UpdateWithoutLevel5DataInput!
  create: Level4CreateWithoutLevel5Input!
}

input Level4WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level4WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level4WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  level2: Level2WhereInput
  level5_every: Level5WhereInput
  level5_some: Level5WhereInput
  level5_none: Level5WhereInput
}

input Level4WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level5Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level5Edge]!
  aggregate: AggregateLevel5!
}

input Level5CreateInput {
  name: String!
  description: String
  active: Boolean
  level6: Level6CreateManyInput
  level4: Level4CreateOneWithoutLevel5Input!
  original: Level3CreateOneWithoutLevel5Input
}

input Level5CreateManyWithoutLevel4Input {
  create: [Level5CreateWithoutLevel4Input!]
  connect: [Level5WhereUniqueInput!]
}

input Level5CreateManyWithoutOriginalInput {
  create: [Level5CreateWithoutOriginalInput!]
  connect: [Level5WhereUniqueInput!]
}

input Level5CreateWithoutLevel4Input {
  name: String!
  description: String
  active: Boolean
  level6: Level6CreateManyInput
  original: Level3CreateOneWithoutLevel5Input
}

input Level5CreateWithoutOriginalInput {
  name: String!
  description: String
  active: Boolean
  level6: Level6CreateManyInput
  level4: Level4CreateOneWithoutLevel5Input!
}

"""
An edge in a connection.
"""
type Level5Edge {
  """
  The item at the end of the edge.
  """
  node: Level5!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level5OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level5PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level5SubscriptionPayload {
  mutation: MutationType!
  node: Level5
  updatedFields: [String!]
  previousValues: Level5PreviousValues
}

input Level5SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level5SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level5SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level5WhereInput
}

input Level5UpdateInput {
  name: String
  description: String
  active: Boolean
  level6: Level6UpdateManyInput
  level4: Level4UpdateOneWithoutLevel5Input
  original: Level3UpdateOneWithoutLevel5Input
}

input Level5UpdateManyWithoutLevel4Input {
  create: [Level5CreateWithoutLevel4Input!]
  connect: [Level5WhereUniqueInput!]
  disconnect: [Level5WhereUniqueInput!]
  delete: [Level5WhereUniqueInput!]
  update: [Level5UpdateWithoutLevel4Input!]
  upsert: [Level5UpsertWithoutLevel4Input!]
}

input Level5UpdateManyWithoutOriginalInput {
  create: [Level5CreateWithoutOriginalInput!]
  connect: [Level5WhereUniqueInput!]
  disconnect: [Level5WhereUniqueInput!]
  delete: [Level5WhereUniqueInput!]
  update: [Level5UpdateWithoutOriginalInput!]
  upsert: [Level5UpsertWithoutOriginalInput!]
}

input Level5UpdateWithoutLevel4DataInput {
  name: String
  description: String
  active: Boolean
  level6: Level6UpdateManyInput
  original: Level3UpdateOneWithoutLevel5Input
}

input Level5UpdateWithoutLevel4Input {
  where: Level5WhereUniqueInput!
  data: Level5UpdateWithoutLevel4DataInput!
}

input Level5UpdateWithoutOriginalDataInput {
  name: String
  description: String
  active: Boolean
  level6: Level6UpdateManyInput
  level4: Level4UpdateOneWithoutLevel5Input
}

input Level5UpdateWithoutOriginalInput {
  where: Level5WhereUniqueInput!
  data: Level5UpdateWithoutOriginalDataInput!
}

input Level5UpsertWithoutLevel4Input {
  where: Level5WhereUniqueInput!
  update: Level5UpdateWithoutLevel4DataInput!
  create: Level5CreateWithoutLevel4Input!
}

input Level5UpsertWithoutOriginalInput {
  where: Level5WhereUniqueInput!
  update: Level5UpdateWithoutOriginalDataInput!
  create: Level5CreateWithoutOriginalInput!
}

input Level5WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level5WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level5WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  level6_every: Level6WhereInput
  level6_some: Level6WhereInput
  level6_none: Level6WhereInput
  level4: Level4WhereInput
  original: Level3WhereInput
}

input Level5WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level6Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level6Edge]!
  aggregate: AggregateLevel6!
}

input Level6CreateInput {
  name: String!
  description: String
  active: Boolean
}

input Level6CreateManyInput {
  create: [Level6CreateInput!]
  connect: [Level6WhereUniqueInput!]
}

"""
An edge in a connection.
"""
type Level6Edge {
  """
  The item at the end of the edge.
  """
  node: Level6!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level6OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level6PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level6SubscriptionPayload {
  mutation: MutationType!
  node: Level6
  updatedFields: [String!]
  previousValues: Level6PreviousValues
}

input Level6SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level6SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level6SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level6WhereInput
}

input Level6UpdateDataInput {
  name: String
  description: String
  active: Boolean
}

input Level6UpdateInput {
  name: String
  description: String
  active: Boolean
}

input Level6UpdateManyInput {
  create: [Level6CreateInput!]
  connect: [Level6WhereUniqueInput!]
  disconnect: [Level6WhereUniqueInput!]
  delete: [Level6WhereUniqueInput!]
  update: [Level6UpdateNestedInput!]
  upsert: [Level6UpsertNestedInput!]
}

input Level6UpdateNestedInput {
  where: Level6WhereUniqueInput!
  data: Level6UpdateDataInput!
}

input Level6UpsertNestedInput {
  where: Level6WhereUniqueInput!
  update: Level6UpdateDataInput!
  create: Level6CreateInput!
}

input Level6WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level6WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level6WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
}

input Level6WhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createLevel1(data: Level1CreateInput!): Level1!
  createLevel2(data: Level2CreateInput!): Level2!
  createLevel3(data: Level3CreateInput!): Level3!
  createLevel4(data: Level4CreateInput!): Level4!
  createLevel5(data: Level5CreateInput!): Level5!
  createLevel6(data: Level6CreateInput!): Level6!
  updateLevel1(data: Level1UpdateInput!, where: Level1WhereUniqueInput!): Level1
  updateLevel2(data: Level2UpdateInput!, where: Level2WhereUniqueInput!): Level2
  updateLevel3(data: Level3UpdateInput!, where: Level3WhereUniqueInput!): Level3
  updateLevel4(data: Level4UpdateInput!, where: Level4WhereUniqueInput!): Level4
  updateLevel5(data: Level5UpdateInput!, where: Level5WhereUniqueInput!): Level5
  updateLevel6(data: Level6UpdateInput!, where: Level6WhereUniqueInput!): Level6
  deleteLevel1(where: Level1WhereUniqueInput!): Level1
  deleteLevel2(where: Level2WhereUniqueInput!): Level2
  deleteLevel3(where: Level3WhereUniqueInput!): Level3
  deleteLevel4(where: Level4WhereUniqueInput!): Level4
  deleteLevel5(where: Level5WhereUniqueInput!): Level5
  deleteLevel6(where: Level6WhereUniqueInput!): Level6
  upsertLevel1(where: Level1WhereUniqueInput!, create: Level1CreateInput!, update: Level1UpdateInput!): Level1!
  upsertLevel2(where: Level2WhereUniqueInput!, create: Level2CreateInput!, update: Level2UpdateInput!): Level2!
  upsertLevel3(where: Level3WhereUniqueInput!, create: Level3CreateInput!, update: Level3UpdateInput!): Level3!
  upsertLevel4(where: Level4WhereUniqueInput!, create: Level4CreateInput!, update: Level4UpdateInput!): Level4!
  upsertLevel5(where: Level5WhereUniqueInput!, create: Level5CreateInput!, update: Level5UpdateInput!): Level5!
  upsertLevel6(where: Level6WhereUniqueInput!, create: Level6CreateInput!, update: Level6UpdateInput!): Level6!
  updateManyLevel1s(data: Level1UpdateInput!, where: Level1WhereInput!): BatchPayload!
  updateManyLevel2s(data: Level2UpdateInput!, where: Level2WhereInput!): BatchPayload!
  updateManyLevel3s(data: Level3UpdateInput!, where: Level3WhereInput!): BatchPayload!
  updateManyLevel4s(data: Level4UpdateInput!, where: Level4WhereInput!): BatchPayload!
  updateManyLevel5s(data: Level5UpdateInput!, where: Level5WhereInput!): BatchPayload!
  updateManyLevel6s(data: Level6UpdateInput!, where: Level6WhereInput!): BatchPayload!
  deleteManyLevel1s(where: Level1WhereInput!): BatchPayload!
  deleteManyLevel2s(where: Level2WhereInput!): BatchPayload!
  deleteManyLevel3s(where: Level3WhereInput!): BatchPayload!
  deleteManyLevel4s(where: Level4WhereInput!): BatchPayload!
  deleteManyLevel5s(where: Level5WhereInput!): BatchPayload!
  deleteManyLevel6s(where: Level6WhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  level1s(where: Level1WhereInput, orderBy: Level1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level1]!
  level2s(where: Level2WhereInput, orderBy: Level2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level2]!
  level3s(where: Level3WhereInput, orderBy: Level3OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level3]!
  level4s(where: Level4WhereInput, orderBy: Level4OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level4]!
  level5s(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level5]!
  level6s(where: Level6WhereInput, orderBy: Level6OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level6]!
  level1(where: Level1WhereUniqueInput!): Level1
  level2(where: Level2WhereUniqueInput!): Level2
  level3(where: Level3WhereUniqueInput!): Level3
  level4(where: Level4WhereUniqueInput!): Level4
  level5(where: Level5WhereUniqueInput!): Level5
  level6(where: Level6WhereUniqueInput!): Level6
  level1sConnection(where: Level1WhereInput, orderBy: Level1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level1Connection!
  level2sConnection(where: Level2WhereInput, orderBy: Level2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level2Connection!
  level3sConnection(where: Level3WhereInput, orderBy: Level3OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level3Connection!
  level4sConnection(where: Level4WhereInput, orderBy: Level4OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level4Connection!
  level5sConnection(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level5Connection!
  level6sConnection(where: Level6WhereInput, orderBy: Level6OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level6Connection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  level1(where: Level1SubscriptionWhereInput): Level1SubscriptionPayload
  level2(where: Level2SubscriptionWhereInput): Level2SubscriptionPayload
  level3(where: Level3SubscriptionWhereInput): Level3SubscriptionPayload
  level4(where: Level4SubscriptionWhereInput): Level4SubscriptionPayload
  level5(where: Level5SubscriptionWhereInput): Level5SubscriptionPayload
  level6(where: Level6SubscriptionWhereInput): Level6SubscriptionPayload
}
